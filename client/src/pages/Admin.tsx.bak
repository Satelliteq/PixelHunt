import React, { useState, useEffect } from "react";
import { useAuth } from "@/lib/AuthContext";
import { useLocation, Link } from "wouter";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { Checkbox } from "@/components/ui/checkbox";
import { Loader2, UserX, Shield, Edit, Trash, Plus, Check, X, Star, Globe, Film, Palette, Gamepad2, Image, Music, Book, BookOpen, Car, Map, Camera, Coffee, Trophy, Users, Heart, PawPrint, Laptop, Smartphone, Server, Atom, Microscope, Dumbbell, Pizza, Cake, Leaf, TreeDeciduous, Sun, BookOpenCheck, Landmark, GamepadIcon, LayoutDashboard, FolderTree, Pencil, MoreVertical, UserCheck, UserMinus, Ban, FileText, Activity, UserPlus } from "lucide-react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { apiRequest } from "@/lib/queryClient";
import { insertCategorySchema, insertTestSchema } from "@/../../shared/schema";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { collection, addDoc, getDocs, doc, updateDoc, deleteDoc, query, where, orderBy, serverTimestamp, limit, getDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { Logo } from "@/components/icons/Logo";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

// Admin Sayfasına Giriş Kontrolü
function AdminAccess() {
  const { user, loading } = useAuth();
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  
  useEffect(() => {
    // Kullanıcı yüklendikten sonra kontrolleri yap
    if (!loading) {
      // Kullanıcı giriş yapmamış
      if (!user) {
        toast({
          title: "Erişim reddedildi",
          description: "Bu sayfaya erişmek için giriş yapmalısınız.",
          variant: "destructive",
        });
        setLocation("/login");
      } else {
        // Admin rolü kontrolü
        const checkAdminAccess = async () => {
          try {
            // Önce hardcoded admin listesini kontrol et
            const isAdminByList = user.uid === '108973046762004266106' ||
                      user.email === 'pixelhuntfun@gmail.com';
                      
            if (isAdminByList) {
              return true;
            }

            // Firestore'dan admin rolünü kontrol et
            const userRef = doc(db, 'users', user.uid);
            const userSnap = await getDoc(userRef);
            
            if (userSnap.exists()) {
              const userData = userSnap.data();
              return userData.role === 'admin';
            }

            return false;
          } catch (error) {
            console.error('Admin kontrolü hatası:', error);
            return false;
          }
        };

        checkAdminAccess().then(isAdmin => {
        if (!isAdmin) {
          toast({
            title: "Erişim reddedildi",
            description: "Bu sayfaya erişmek için admin yetkisine sahip olmalısınız.",
            variant: "destructive",
          });
          setLocation("/");
        }
        });
      }
    }
  }, [user, loading, toast, setLocation]);
  
  // Kullanıcı yükleniyor
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="w-8 h-8 animate-spin text-primary mb-4" />
        <p className="text-muted-foreground">Yetkilendiriliyor...</p>
      </div>
    );
  }
  
  // Kullanıcı yüklendi ve admin yetkisi varsa göster
  if (user) {
    return <AdminPanel />;
  }
  
  // Yetkilendirme kontrolleri useEffect ile yapılıyor, boş bir div döndür
  return <div className="flex items-center justify-center min-h-screen"></div>;
}

// Kullanılabilir ikonların listesi 
const availableIcons = [
  { name: "star", component: Star },
  { name: "globe", component: Globe },
  { name: "film", component: Film },
  { name: "palette", component: Palette },
  { name: "image", component: Image },
  { name: "music", component: Music },
  { name: "book", component: Book },
  { name: "book-open", component: BookOpen },
  { name: "car", component: Car },
  { name: "map", component: Map },
  { name: "camera", component: Camera },
  { name: "coffee", component: Coffee },
  { name: "trophy", component: Trophy },
  { name: "users", component: Users },
  { name: "heart", component: Heart },
  { name: "gamepad-2", component: Gamepad2 },
  { name: "paw-print", component: PawPrint },
  { name: "laptop", component: Laptop },
  { name: "smartphone", component: Smartphone },
  { name: "server", component: Server },
  { name: "atom", component: Atom },
  { name: "microscope", component: Microscope },
  { name: "dumbbell", component: Dumbbell },
  { name: "pizza", component: Pizza },
  { name: "cake", component: Cake },
  { name: "leaf", component: Leaf },
  { name: "tree", component: TreeDeciduous },
  { name: "sun", component: Sun },
  { name: "landmark", component: Landmark },
  { name: "gamepad", component: GamepadIcon }
];

// İkon adına göre ilgili komponenti döndüren yardımcı fonksiyon
const getIconComponent = (iconName: string | null | undefined): React.ReactNode => {
  if (!iconName) return null;
  const icon = availableIcons.find(icon => icon.name === iconName);
  if (!icon) return null;
  const IconComponent = icon.component;
  return <IconComponent className="w-4 h-4" />;
};

// Kategori yönetimi için form şeması - basitleştirilmiş model
const categoryFormSchema = z.object({
  name: z.string().min(3, {
    message: "Kategori adı en az 3 karakter olmalıdır.",
  }),
  description: z.string().min(10, {
    message: "Açıklama en az 10 karakter olmalıdır.",
  }),
  iconName: z.string().nullable().optional(),
  active: z.boolean().default(true)
});

type CategoryFormValues = z.infer<typeof categoryFormSchema>;

// Kategori emojisini döndüren yardımcı fonksiyon
const getCategoryEmoji = (name: string, index: number): string => {
  const emojis = ['🎮', '🎨', '🎬', '🎵', '📚', '🚗', '🌍', '📸', '☕', '🏆', '👥', '❤️', '🐾', '💻', '📱', '🔬', '💪', '🍕', '🍰', '🌿', '🌳', '☀️', '🏛️', '🎯'];
  return emojis[index % emojis.length];
};

// Admin Paneli Ana Bileşeni
function AdminPanel() {
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("categories");
  const [isLoading, setIsLoading] = useState(false);
  const [categories, setCategories] = useState<any[]>([]);
  const [tests, setTests] = useState<any[]>([]);
  const [users, setUsers] = useState<any[]>([]);
  const [activities, setActivities] = useState<any[]>([]);
  const [popularTests, setPopularTests] = useState<any[]>([]);
  const [isCategoryDialogOpen, setIsCategoryDialogOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<any>(null);
  const [showCategoryForm, setShowCategoryForm] = useState(false);
  const [editingCategory, setEditingCategory] = useState<any>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [filterStatus, setFilterStatus] = useState("all");
  const [filterRole, setFilterRole] = useState("all");

  // Form tanımlamaları
  const categoryForm = useForm<CategoryFormValues>({
    resolver: zodResolver(categoryFormSchema),
    defaultValues: {
      name: "",
      description: "",
    },
  });

  // Kategori ekle/düzenle işlemi
  const handleCategorySubmit = async (values: CategoryFormValues) => {
    setIsLoading(true);
    try {
      // Yeni kategori ekleme
      if (!selectedCategory) {
        const categoryData = {
          name: values.name,
          description: values.description,
          iconName: values.iconName || null,
          active: values.active,
          createdAt: serverTimestamp()
        };
        
        await addDoc(collection(db, 'categories'), categoryData);
        
        toast({
          title: "Başarılı",
          description: "Kategori başarıyla eklendi.",
        });
      }
      // Kategori güncelleme
      else {
        const categoryRef = doc(db, 'categories', selectedCategory.id);
        
        const updateData = {
          name: values.name,
          description: values.description,
          iconName: values.iconName,
          active: values.active,
          updatedAt: serverTimestamp()
        };
        
        await updateDoc(categoryRef, updateData);
        
        toast({
          title: "Başarılı",
          description: "Kategori başarıyla güncellendi.",
        });
      }

      // Form ve dialog'u sıfırla
      categoryForm.reset();
      setIsCategoryDialogOpen(false);
      setSelectedCategory(null);

      // Kategorileri yeniden yükle
      fetchCategories();
    } catch (error) {
      console.error("Kategori işlemi sırasında hata:", error);
      toast({
        title: "Hata",
        description: "Kategori işlemi sırasında bir hata oluştu.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Kategori yükleme
  const fetchCategories = async () => {
    setIsLoading(true);
    try {
      const categoriesRef = collection(db, 'categories');
      const q = query(categoriesRef, orderBy('name'));
      const querySnapshot = await getDocs(q);
      
      const categoriesData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      
      setCategories(categoriesData);
    } catch (error) {
      console.error("Kategoriler yüklenirken hata:", error);
      toast({
        title: "Hata",
        description: "Kategoriler yüklenirken bir hata oluştu.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Testleri yükleme
  const fetchTests = async () => {
    setIsLoading(true);
    try {
      const testsRef = collection(db, 'tests');
      const q = query(testsRef, orderBy('createdAt', 'desc'));
      const querySnapshot = await getDocs(q);
      
      const testsData = await Promise.all(querySnapshot.docs.map(async (docSnapshot) => {
        const testData = docSnapshot.data();
        console.log('Test verisi:', testData);
        
        // Test oluşturan kullanıcının bilgilerini al
        let creatorName = "Bilinmeyen";
        if (testData.creatorId) { // userId yerine creatorId kullanıyoruz
          console.log('Kullanıcı ID:', testData.creatorId);
          const userRef = doc(db, 'users', testData.creatorId);
          const userSnap = await getDoc(userRef);
          
          if (userSnap.exists()) {
            const userData = userSnap.data();
            console.log('Kullanıcı verisi:', userData);
            
            // Kullanıcı adını belirle
            if (userData.displayName) {
              creatorName = userData.displayName;
            } else if (userData.username) {
              creatorName = userData.username;
            } else if (userData.email) {
              creatorName = userData.email;
            }
            
            console.log('Belirlenen oluşturan adı:', creatorName);
          } else {
            console.log('Kullanıcı bulunamadı:', testData.creatorId);
          }
        } else {
          console.log('Test için creatorId bulunamadı');
        }

        // Test durumunu kontrol et
        const isActive = testData.isActive !== false;

        return {
          id: docSnapshot.id,
          ...testData,
          creatorName,
          isActive
        };
      }));
      
      console.log('Yüklenen testler:', testsData);
      setTests(testsData);
    } catch (error) {
      console.error("Testler yüklenirken hata:", error);
      toast({
        title: "Hata",
        description: "Testler yüklenirken bir hata oluştu.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Kullanıcı yönetimi için API istekleri
  const fetchUsers = async () => {
    setIsLoading(true);
    try {
      const usersRef = collection(db, 'users');
      const querySnapshot = await getDocs(usersRef);
      
      const usersData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      
      setUsers(usersData);
    } catch (error) {
      console.error("Kullanıcılar yüklenirken hata:", error);
      toast({
        title: "Hata",
        description: "Kullanıcılar yüklenirken bir hata oluştu. Admin yetkileriniz olduğundan emin olun.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Kategori düzenleme için dialog'u aç - basitleştirilmiş model
  const openEditCategoryDialog = (category: any) => {
    setSelectedCategory(category);
    categoryForm.reset({
      name: category.name,
      description: category.description,
      iconName: category.iconName,
      active: category.active
    });
    setIsCategoryDialogOpen(true);
  };
  
  // Kullanıcı etkinliklerini yükle ve popüler testleri göster
  const fetchActivitiesAndPopularTests = async () => {
    setIsLoading(true);
    try {
      // Aktiviteleri yükle
      const activitiesRef = collection(db, 'userActivities');
      const q = query(activitiesRef, orderBy('createdAt', 'desc'), limit(20));
      const querySnapshot = await getDocs(q);
      
      const activitiesData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt?.toDate()
      }));
      
      setActivities(activitiesData);
      
      // Popüler testleri yükle
      const testsRef = collection(db, 'tests');
      const testsQuery = query(
        testsRef,
        where('isPublic', '==', true),
        where('approved', '==', true),
        orderBy('playCount', 'desc'),
        limit(3)
      );
      
      const testsSnapshot = await getDocs(testsQuery);
      const testsData = testsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      
      setPopularTests(testsData);
    } catch (error) {
      console.error("Etkinlikler yüklenirken hata:", error);
      toast({
        title: "Hata",
        description: "Kullanıcı etkinlikleri yüklenirken bir hata oluştu.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Kullanıcı etkinliklerini göster
  const showUserActivities = async (userId: string) => {
    try {
      const activitiesRef = collection(db, 'userActivities');
      const q = query(
        activitiesRef,
        where('userId', '==', userId),
        orderBy('createdAt', 'desc'),
        limit(20)
      );
      
      const querySnapshot = await getDocs(q);
      const activitiesData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt?.toDate()
      }));
      
      setActivities(activitiesData);
      setActiveTab("activities");
    } catch (error) {
      console.error("Kullanıcı etkinlikleri yüklenirken hata:", error);
      toast({
        title: "Hata",
        description: "Kullanıcı etkinlikleri yüklenirken bir hata oluştu.",
        variant: "destructive",
      });
    }
  };

  // Test silme
  const handleDeleteTest = async (testId: string) => {
    if (window.confirm("Bu testi silmek istediğinize emin misiniz?")) {
      setIsLoading(true);
      try {
        const testRef = doc(db, 'tests', testId);
        await deleteDoc(testRef);
        
        toast({
          title: "Başarılı",
          description: "Test başarıyla silindi.",
        });
        // Testleri yeniden yükle
        fetchTests();
      } catch (error) {
        console.error("Test silinirken hata:", error);
        toast({
          title: "Hata",
          description: "Test silinirken bir hata oluştu.",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  // Kullanıcı banlama veya ban kaldırma
  const handleBanUser = async (userId: string, currentBanStatus: boolean) => {
    const confirmMessage = currentBanStatus 
      ? "Bu kullanıcının banını kaldırmak istediğinize emin misiniz?" 
      : "Bu kullanıcıyı banlamak istediğinize emin misiniz?";
    
    if (window.confirm(confirmMessage)) {
      setIsLoading(true);
      try {
        const userRef = doc(db, 'users', userId);
        await updateDoc(userRef, {
          banned: !currentBanStatus
        });
        
        toast({
          title: "Başarılı",
          description: currentBanStatus 
            ? "Kullanıcının banı kaldırıldı." 
            : "Kullanıcı başarıyla banlandı.",
        });
        
        // Kullanıcıları yeniden yükle
        fetchUsers();
      } catch (error) {
        console.error("Kullanıcı ban işlemi sırasında hata:", error);
        toast({
          title: "Hata",
          description: "Kullanıcı işlemi sırasında bir hata oluştu.",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  // Admin rolü atama
  const handleToggleAdminRole = async (userId: string, currentRole: string) => {
    const newRole = currentRole === "admin" ? "user" : "admin";
    const confirmMessage =
      currentRole === "admin"
        ? "Bu kullanıcının admin yetkisini kaldırmak istediğinize emin misiniz?"
        : "Bu kullanıcıya admin yetkisi vermek istediğinize emin misiniz?";

    if (window.confirm(confirmMessage)) {
      setIsLoading(true);
      try {
        // Firestore'da rolü güncelle
        const userRef = doc(db, 'users', userId);
        await updateDoc(userRef, {
          role: newRole
        });

        // Firebase Auth'da custom claims'i güncelle
        const userDoc = await getDoc(userRef);
        if (userDoc.exists()) {
          const userData = userDoc.data();
          if (userData.email) {
            // Firebase Admin SDK kullanarak custom claims'i güncelle
            await fetch('/api/admin/update-user-role', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                uid: userId,
                role: newRole
              })
            });
          }
        }
        
        toast({
          title: "Başarılı",
          description: `Kullanıcı rolü ${newRole === "admin" ? "admin" : "kullanıcı"} olarak güncellendi.`,
        });
        
        // Kullanıcıları yeniden yükle
        fetchUsers();
      } catch (error) {
        console.error("Kullanıcı rolü güncellenirken hata:", error);
        toast({
          title: "Hata",
          description: "Kullanıcı rolü güncellenirken bir hata oluştu.",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  // Kategori düzenleme
  const handleEditCategory = (category: any) => {
    setEditingCategory(category);
    categoryForm.reset({
      name: category.name,
      description: category.description,
      iconName: category.iconName,
      active: category.active
    });
    setShowCategoryForm(true);
  };

  // Kategori silme
  const handleDeleteCategory = async (categoryId: string) => {
    if (window.confirm("Bu kategoriyi silmek istediğinize emin misiniz?")) {
      setIsLoading(true);
      try {
        const categoryRef = doc(db, 'categories', categoryId);
        await deleteDoc(categoryRef);
        
        toast({
          title: "Başarılı",
          description: "Kategori başarıyla silindi.",
        });
        
        // Kategorileri yeniden yükle
        fetchCategories();
      } catch (error) {
        console.error("Kategori silinirken hata:", error);
        toast({
          title: "Hata",
          description: "Kategori silinirken bir hata oluştu.",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  // Kategori form gönderimi
  const onSubmitCategory = async (values: CategoryFormValues) => {
    setIsLoading(true);
    try {
      if (editingCategory) {
        // Kategori güncelleme
        const categoryRef = doc(db, 'categories', editingCategory.id);
        await updateDoc(categoryRef, {
          ...values,
          updatedAt: serverTimestamp()
        });
        
        toast({
          title: "Başarılı",
          description: "Kategori başarıyla güncellendi.",
        });
      } else {
        // Yeni kategori ekleme
        await addDoc(collection(db, 'categories'), {
          ...values,
          createdAt: serverTimestamp()
        });
        
        toast({
          title: "Başarılı",
          description: "Kategori başarıyla eklendi.",
        });
      }
      
      setShowCategoryForm(false);
      setEditingCategory(null);
      categoryForm.reset();
      fetchCategories();
    } catch (error) {
      console.error("Kategori işlemi sırasında hata:", error);
      toast({
        title: "Hata",
        description: "Kategori işlemi sırasında bir hata oluştu.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Sayfa açıldığında ilgili verileri yükle
  useEffect(() => {
    // Active tab değiştiğinde ilgili verileri yükle
    if (activeTab === "categories") {
      fetchCategories();
    } else if (activeTab === "tests") {
      fetchTests();
    } else if (activeTab === "users") {
      fetchUsers();
    } else if (activeTab === "activities") {
      fetchActivitiesAndPopularTests();
    }
  }, [activeTab]);

  return (
    <div className="min-h-screen bg-background">
      <div className="flex">
        {/* Sidebar */}
        <div className="w-64 min-h-screen border-r bg-card p-4">
          <div className="flex items-center gap-2 mb-8">
            <Logo className="w-8 h-8" />
            <h2 className="text-xl font-bold">Admin Panel</h2>
          </div>
          
          <nav className="space-y-2">
            <Button
              variant={activeTab === "dashboard" ? "default" : "ghost"}
              className="w-full justify-start"
              onClick={() => setActiveTab("dashboard")}
            >
              <LayoutDashboard className="w-4 h-4 mr-2" />
              Dashboard
            </Button>
            <Button
              variant={activeTab === "categories" ? "default" : "ghost"}
              className="w-full justify-start"
              onClick={() => setActiveTab("categories")}
            >
              <FolderTree className="w-4 h-4 mr-2" />
              Kategoriler
            </Button>
            <Button
              variant={activeTab === "tests" ? "default" : "ghost"}
              className="w-full justify-start"
              onClick={() => setActiveTab("tests")}
            >
              <FileText className="w-4 h-4 mr-2" />
              Testler
            </Button>
            <Button
              variant={activeTab === "users" ? "default" : "ghost"}
              className="w-full justify-start"
              onClick={() => setActiveTab("users")}
            >
              <Users className="w-4 h-4 mr-2" />
              Kullanıcılar
            </Button>
            <Button 
              variant={activeTab === "activities" ? "default" : "ghost"}
              className="w-full justify-start"
              onClick={() => setActiveTab("activities")}
            >
              <Activity className="w-4 h-4 mr-2" />
              Aktiviteler
            </Button>
          </nav>
        </div>

        {/* Main Content */}
        <div className="flex-1 p-8">
          {activeTab === "dashboard" && (
            <div className="space-y-6">
              <h1 className="text-3xl font-bold">Dashboard</h1>
              
              {/* Stats Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <CardTitle className="text-sm font-medium">Toplam Kullanıcı</CardTitle>
                    <Users className="w-4 h-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{users.length}</div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <CardTitle className="text-sm font-medium">Toplam Test</CardTitle>
                    <FileText className="w-4 h-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{tests.length}</div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <CardTitle className="text-sm font-medium">Toplam Kategori</CardTitle>
                    <FolderTree className="w-4 h-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{categories.length}</div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <CardTitle className="text-sm font-medium">Aktif Kullanıcılar</CardTitle>
                    <UserCheck className="w-4 h-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">
                      {users.filter(user => !user.banned).length}
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Recent Activities */}
              <Card>
                <CardHeader>
                  <CardTitle>Son Aktiviteler</CardTitle>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Kullanıcı</TableHead>
                        <TableHead>Aktivite</TableHead>
                        <TableHead>Detay</TableHead>
                        <TableHead>Tarih</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {activities.slice(0, 5).map((activity) => (
                        <TableRow key={activity.id}>
                          <TableCell>{activity.userName}</TableCell>
                          <TableCell>{activity.type}</TableCell>
                          <TableCell>{activity.details}</TableCell>
                          <TableCell>{new Date(activity.timestamp).toLocaleDateString()}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </div>
          )}

          {activeTab === "categories" && (
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <h1 className="text-3xl font-bold">Kategoriler</h1>
                <Button onClick={() => setShowCategoryForm(true)}>
                  <Plus className="w-4 h-4 mr-2" />
                  Yeni Kategori
                </Button>
              </div>

              <Card>
                <CardContent className="p-6">
                  {isLoading ? (
                    <div className="flex justify-center py-8">
                      <Loader2 className="w-8 h-8 animate-spin text-primary" />
                    </div>
                  ) : categories.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      Henüz kategori bulunmuyor.
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                      {categories.map((category, index) => (
                        <Card 
                          key={category.id}
                          className="cursor-pointer hover:border-primary/50 transition-all duration-300 overflow-hidden group"
                        >
                          <div className="p-6 flex flex-col items-center text-center">
                            <div className={`w-16 h-16 rounded-full flex items-center justify-center text-2xl mb-4 transition-transform group-hover:scale-110 ${
                              index % 6 === 0 ? "bg-amber-100 text-amber-600 dark:bg-amber-950 dark:text-amber-400" : 
                              index % 6 === 1 ? "bg-sky-100 text-sky-600 dark:bg-sky-950 dark:text-sky-400" : 
                              index % 6 === 2 ? "bg-emerald-100 text-emerald-600 dark:bg-emerald-950 dark:text-emerald-400" : 
                              index % 6 === 3 ? "bg-violet-100 text-violet-600 dark:bg-violet-950 dark:text-violet-400" : 
                              index % 6 === 4 ? "bg-yellow-100 text-yellow-600 dark:bg-yellow-950 dark:text-yellow-400" : 
                              "bg-orange-100 text-orange-600 dark:bg-orange-950 dark:text-orange-400"
                            }`}>
                              {category.iconName ? getIconComponent(category.iconName) : getCategoryEmoji(category.name, index)}
                            </div>
                            <h3 className="text-lg font-medium mb-1">{category.name}</h3>
                            <p className="text-sm text-muted-foreground line-clamp-2">{category.description}</p>
                            
                            <div className="mt-4 pt-4 border-t border-border/50 w-full">
                              <div className="flex justify-center gap-2">
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="text-xs group-hover:bg-primary group-hover:text-primary-foreground"
                                  onClick={() => handleEditCategory(category)}
                                >
                                  <Pencil className="h-3 w-3 mr-1" /> Düzenle
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="text-xs group-hover:bg-destructive group-hover:text-destructive-foreground"
                                  onClick={() => handleDeleteCategory(category.id)}
                                >
                                  <Trash className="h-3 w-3 mr-1" /> Sil
                                </Button>
                              </div>
                            </div>
                          </div>
                        </Card>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          )}

          {activeTab === "tests" && (
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <h1 className="text-3xl font-bold">Testler</h1>
              </div>

              <Card>
                <CardContent className="p-6">
                  {isLoading ? (
                    <div className="flex justify-center py-8">
                      <Loader2 className="w-8 h-8 animate-spin text-primary" />
                    </div>
                  ) : tests.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      Henüz test bulunmuyor.
                    </div>
                  ) : (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Test Adı</TableHead>
                          <TableHead>Kategori</TableHead>
                          <TableHead>Oluşturan</TableHead>
                          <TableHead>Durum</TableHead>
                          <TableHead className="text-right">İşlemler</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {tests
                          .filter(test => 
                            test.title.toLowerCase().includes(searchQuery.toLowerCase()) &&
                            (filterStatus === 'all' || 
                             (filterStatus === 'active' && test.isActive) ||
                             (filterStatus === 'inactive' && !test.isActive))
                          )
                          .map((test) => (
                        <TableRow key={test.id}>
                          <TableCell className="font-medium">{test.title}</TableCell>
                          <TableCell>
                            {categories.find(c => c.id === test.categoryId)?.name || "Kategori yok"}
                          </TableCell>
                          <TableCell>{test.creatorName}</TableCell>
                          <TableCell>
                            <Badge variant={test.isActive ? "success" : "secondary"}>
                              {test.isActive ? "Aktif" : "Pasif"}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-right">
                            <div className="flex justify-end gap-2">
                              <Button variant="ghost" size="icon" asChild>
                                <Link to={`/test/${test.id}`}>
                                  <Eye className="w-4 h-4" />
                                </Link>
                              </Button>
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => handleDeleteTest(test.id)}
                              >
                                <Trash className="w-4 h-4 text-destructive" />
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </Table>
                  )}
                </CardContent>
              </Card>
            </div>
          )}

          {activeTab === "users" && (
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <h1 className="text-3xl font-bold">Kullanıcılar</h1>
                <div className="flex items-center gap-2">
                  <Input
                    placeholder="Kullanıcı ara..."
                    className="w-64"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                  />
                  <Select value={filterRole} onValueChange={setFilterRole}>
                    <SelectTrigger className="w-32">
                      <SelectValue placeholder="Rol" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Tümü</SelectItem>
                      <SelectItem value="admin">Admin</SelectItem>
                      <SelectItem value="user">Kullanıcı</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <Card>
                <CardContent className="p-6">
                  {isLoading ? (
                    <div className="flex justify-center py-8">
                      <Loader2 className="w-8 h-8 animate-spin text-primary" />
                    </div>
                  ) : users.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      Henüz kullanıcı bulunmuyor.
                    </div>
                  ) : (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Kullanıcı Adı</TableHead>
                          <TableHead>E-posta</TableHead>
                          <TableHead>Rol</TableHead>
                          <TableHead>Durum</TableHead>
                          <TableHead className="text-right">İşlemler</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {users
                          .filter(user => 
                            (user.username?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                             user.email.toLowerCase().includes(searchQuery.toLowerCase())) &&
                            (filterRole === 'all' || user.role === filterRole)
                          )
                          .map((user) => (
                        <TableRow key={user.id}>
                          <TableCell className="font-medium">
                            {user.username || user.displayName || "Kullanıcı"}
                          </TableCell>
                          <TableCell>{user.email}</TableCell>
                          <TableCell>
                            <Badge variant={user.role === "admin" ? "default" : "outline"}>
                              {user.role === "admin" ? "Admin" : "Kullanıcı"}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            {user.banned ? (
                              <Badge variant="destructive">Banlı</Badge>
                            ) : (
                              <Badge variant="success" className="bg-green-500/10 text-green-600 border-green-200">
                                Aktif
                              </Badge>
                            )}
                          </TableCell>
                          <TableCell className="text-right">
                            <div className="flex justify-end gap-2">
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => handleToggleAdminRole(user.id, user.role)}
                              >
                                {user.role === "admin" ? (
                                  <UserMinus className="w-4 h-4" />
                                ) : (
                                  <UserPlus className="w-4 h-4" />
                                )}
                              </Button>
                              {user.banned ? (
                                <Button
                                  variant="ghost"
                                  size="icon"
                                  onClick={() => handleBanUser(user.id, false)}
                                >
                                  <Check className="w-4 h-4 text-success" />
                                </Button>
                              ) : (
                                <Button
                                  variant="ghost"
                                  size="icon"
                                  onClick={() => handleBanUser(user.id, true)}
                                >
                                  <Ban className="w-4 h-4 text-destructive" />
                                </Button>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </Table>
                  )}
                </CardContent>
              </Card>
            </div>
          )}

          {activeTab === "activities" && (
            <div className="space-y-6">
              <h1 className="text-3xl font-bold">Aktiviteler</h1>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Son Aktiviteler</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Kullanıcı</TableHead>
                          <TableHead>Aktivite</TableHead>
                          <TableHead>Detay</TableHead>
                          <TableHead>Tarih</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {activities.map((activity) => (
                          <TableRow key={activity.id}>
                            <TableCell>{activity.userName}</TableCell>
                            <TableCell>{activity.type}</TableCell>
                            <TableCell>{activity.details}</TableCell>
                            <TableCell>{new Date(activity.timestamp).toLocaleDateString()}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Popüler Testler</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Test</TableHead>
                          <TableHead>Kategori</TableHead>
                          <TableHead>Oynanma</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {popularTests.map((test) => (
                          <TableRow key={test.id}>
                            <TableCell>{test.title}</TableCell>
                            <TableCell>
                              {categories.find(c => c.id === test.categoryId)?.name || "Kategori yok"}
                            </TableCell>
                            <TableCell>{test.playCount}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </CardContent>
                </Card>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Category Form Dialog */}
      <Dialog open={showCategoryForm} onOpenChange={setShowCategoryForm}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {editingCategory ? "Kategori Düzenle" : "Yeni Kategori"}
            </DialogTitle>
          </DialogHeader>
          <Form {...categoryForm}>
            <form onSubmit={categoryForm.handleSubmit(onSubmitCategory)} className="space-y-4">
              <FormField
                control={categoryForm.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Kategori Adı</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="Kategori adı..." />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={categoryForm.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Açıklama</FormLabel>
                    <FormControl>
                      <Textarea
                        {...field}
                        placeholder="Kategori hakkında kısa açıklama..."
                        rows={3}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={categoryForm.control}
                name="iconName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>İkon</FormLabel>
                    <div className="grid grid-cols-6 gap-2 p-3 max-h-[180px] overflow-y-auto border rounded-md bg-background">
                      {availableIcons.map((icon) => {
                        const IconComponent = icon.component;
                        return (
                          <div
                            key={icon.name}
                            onClick={() => field.onChange(icon.name)}
                            className={`flex flex-col items-center justify-center p-2 rounded-md cursor-pointer transition-colors ${
                              field.value === icon.name
                                ? "bg-primary/20 border border-primary"
                                : "hover:bg-muted border border-transparent"
                            }`}
                          >
                            <IconComponent className="w-6 h-6" />
                          </div>
                        );
                      })}
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <DialogFooter>
                <Button type="submit" disabled={isLoading}>
                  {isLoading && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                  {editingCategory ? "Güncelle" : "Oluştur"}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </div>
  );
}

// Add missing Eye component
const Eye = ({ className }: { className?: string }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
    className={className}
  >
    <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" />
    <circle cx="12" cy="12" r="3" />
  </svg>
);

export default AdminAccess;